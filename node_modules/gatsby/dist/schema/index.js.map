{"version":3,"sources":["../../src/schema/index.js"],"names":["tracer","require","globalTracer","store","nodeStore","createSchemaComposer","buildSchema","rebuildSchemaWithSitePage","TypeConflictReporter","module","exports","build","parentSpan","spanArgs","childOf","span","startSpan","schemaCustomization","thirdPartySchemas","types","config","mapping","typeMapping","getState","typeConflictReporter","sortedTypes","sort","type","plugin","name","schemaComposer","schema","printConflicts","dispatch","payload","finish","rebuildWithSitePage","composer"],"mappings":"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","sourcesContent":["/* @flow */\n\nconst tracer = require(`opentracing`).globalTracer()\nconst { store } = require(`../redux`)\nconst nodeStore = require(`../db/nodes`)\nconst { createSchemaComposer } = require(`./schema-composer`)\nconst { buildSchema, rebuildSchemaWithSitePage } = require(`./schema`)\nconst { TypeConflictReporter } = require(`./infer/type-conflict-reporter`)\n\nmodule.exports.build = async ({ parentSpan }) => {\n  const spanArgs = parentSpan ? { childOf: parentSpan } : {}\n  const span = tracer.startSpan(`build schema`, spanArgs)\n\n  let {\n    schemaCustomization: { thirdPartySchemas, types },\n    config: { mapping: typeMapping },\n  } = store.getState()\n\n  const typeConflictReporter = new TypeConflictReporter()\n\n  // Ensure that user-defined types are processed last\n  const sortedTypes = types.sort(\n    type => type.plugin && type.plugin.name === `default-site-plugin`\n  )\n\n  const schemaComposer = createSchemaComposer()\n  const schema = await buildSchema({\n    schemaComposer,\n    nodeStore,\n    types: sortedTypes,\n    thirdPartySchemas,\n    typeMapping,\n    typeConflictReporter,\n    parentSpan,\n  })\n\n  typeConflictReporter.printConflicts()\n\n  store.dispatch({\n    type: `SET_SCHEMA_COMPOSER`,\n    payload: schemaComposer,\n  })\n  store.dispatch({\n    type: `SET_SCHEMA`,\n    payload: schema,\n  })\n\n  span.finish()\n}\n\nmodule.exports.rebuildWithSitePage = async ({ parentSpan }) => {\n  const spanArgs = parentSpan ? { childOf: parentSpan } : {}\n  const span = tracer.startSpan(\n    `rebuild schema with SitePage context`,\n    spanArgs\n  )\n  let {\n    schemaCustomization: { composer: schemaComposer },\n    config: { mapping: typeMapping },\n  } = store.getState()\n\n  const typeConflictReporter = new TypeConflictReporter()\n\n  const schema = await rebuildSchemaWithSitePage({\n    schemaComposer,\n    nodeStore,\n    typeMapping,\n    typeConflictReporter,\n    parentSpan,\n  })\n\n  typeConflictReporter.printConflicts()\n\n  store.dispatch({\n    type: `SET_SCHEMA_COMPOSER`,\n    payload: schemaComposer,\n  })\n  store.dispatch({\n    type: `SET_SCHEMA`,\n    payload: schema,\n  })\n\n  span.finish()\n}\n"],"file":"index.js"}
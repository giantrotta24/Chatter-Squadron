{"version":3,"sources":["../../../src/schema/extensions/index.js"],"names":["GraphQLBoolean","GraphQLNonNull","GraphQLDirective","GraphQLString","DirectiveLocation","defaultFieldResolver","require","link","fileByPath","getDateResolver","internalExtensionNames","typeExtensions","infer","description","args","noDefaultResolvers","type","deprecationReason","dontInfer","fieldExtensions","dateformat","formatString","locale","process","fieldConfig","by","defaultValue","from","resolve","fileByRelativePath","proxy","resolver","source","context","info","fieldName","toDirectives","extensions","locations","Object","keys","map","name","extension","addDirectives","schemaComposer","fieldDirectives","FIELD_DEFINITION","forEach","directive","addDirective","typeDirectives","OBJECT","processFieldExtensions","typeComposer","parentSpan","getFieldNames","getFieldExtensions","filter","includes","sort","a","prevFieldConfig","getFieldConfig","extendField","module","exports"],"mappings":"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","sourcesContent":["const {\n  GraphQLBoolean,\n  GraphQLNonNull,\n  GraphQLDirective,\n  GraphQLString,\n  DirectiveLocation,\n  defaultFieldResolver,\n} = require(`graphql`)\n\nconst { link, fileByPath } = require(`../resolvers`)\nconst { getDateResolver } = require(`../types/date`)\n\n// Reserved for internal use\nconst internalExtensionNames = [`createdFrom`, `directives`, `infer`, `plugin`]\n\nconst typeExtensions = {\n  infer: {\n    description: `Infer field types from field values.`,\n    args: {\n      noDefaultResolvers: {\n        type: GraphQLBoolean,\n        description: `Don't add default resolvers to defined fields.`,\n        deprecationReason: `noDefaultResolvers is deprecated, annotate individual fields.`,\n      },\n    },\n  },\n  dontInfer: {\n    description: `Do not infer field types from field values.`,\n    args: {\n      noDefaultResolvers: {\n        type: GraphQLBoolean,\n        description: `Don't add default resolvers to defined fields.`,\n        deprecationReason: `noDefaultResolvers is deprecated, annotate individual fields.`,\n      },\n    },\n  },\n}\n\nconst fieldExtensions = {\n  dateformat: {\n    description: `Add date formating options.`,\n    args: {\n      formatString: { type: GraphQLString },\n      locale: { type: GraphQLString },\n    },\n    process(args, fieldConfig) {\n      return getDateResolver(args)\n    },\n  },\n\n  link: {\n    description: `Link to node by foreign-key relation.`,\n    args: {\n      by: {\n        type: new GraphQLNonNull(GraphQLString),\n        defaultValue: `id`,\n      },\n      from: {\n        type: GraphQLString,\n      },\n    },\n    process(args, fieldConfig) {\n      return {\n        resolve: link(args),\n      }\n    },\n  },\n\n  fileByRelativePath: {\n    description: `Link to File node by relative path.`,\n    args: {\n      from: {\n        type: GraphQLString,\n      },\n    },\n    process(args, fieldConfig) {\n      return {\n        resolve: fileByPath(args),\n      }\n    },\n  },\n\n  proxy: {\n    description: `Proxy resolver from another field.`,\n    args: {\n      from: {\n        type: GraphQLString,\n      },\n    },\n    process({ from }, fieldConfig) {\n      const resolver = fieldConfig.resolve || defaultFieldResolver\n      return {\n        resolve(source, args, context, info) {\n          return resolver(source, args, context, {\n            ...info,\n            fieldName: from,\n          })\n        },\n      }\n    },\n  },\n}\n\nconst toDirectives = ({ extensions, locations }) =>\n  Object.keys(extensions).map(name => {\n    const extension = extensions[name]\n    const { args, description } = extension\n    return new GraphQLDirective({ name, args, description, locations })\n  })\n\nconst addDirectives = ({ schemaComposer }) => {\n  const fieldDirectives = toDirectives({\n    extensions: fieldExtensions,\n    locations: [DirectiveLocation.FIELD_DEFINITION],\n  })\n  fieldDirectives.forEach(directive => schemaComposer.addDirective(directive))\n  const typeDirectives = toDirectives({\n    extensions: typeExtensions,\n    locations: [DirectiveLocation.OBJECT],\n  })\n  typeDirectives.forEach(directive => schemaComposer.addDirective(directive))\n}\n\nconst processFieldExtensions = ({\n  schemaComposer,\n  typeComposer,\n  parentSpan,\n}) => {\n  typeComposer.getFieldNames().forEach(fieldName => {\n    const extensions = typeComposer.getFieldExtensions(fieldName)\n    Object.keys(extensions)\n      .filter(name => !internalExtensionNames.includes(name))\n      .sort(a => a === `proxy`) // Ensure `proxy` is run last\n      .forEach(name => {\n        const { process } = fieldExtensions[name] || {}\n        if (process) {\n          // Always get fresh field config as it will have been changed\n          // by previous field extension\n          const prevFieldConfig = typeComposer.getFieldConfig(fieldName)\n          typeComposer.extendField(\n            fieldName,\n            process(extensions[name], prevFieldConfig)\n          )\n        }\n      })\n  })\n}\n\nmodule.exports = {\n  addDirectives,\n  processFieldExtensions,\n}\n"],"file":"index.js"}
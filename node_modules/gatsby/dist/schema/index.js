"use strict";

const tracer = require(`opentracing`).globalTracer();

const {
  store
} = require(`../redux`);

const nodeStore = require(`../db/nodes`);

const {
  createSchemaComposer
} = require(`./schema-composer`);

const {
  buildSchema,
  rebuildSchemaWithSitePage
} = require(`./schema`);

const {
  TypeConflictReporter
} = require(`./infer/type-conflict-reporter`);

module.exports.build = async ({
  parentSpan
}) => {
  const spanArgs = parentSpan ? {
    childOf: parentSpan
  } : {};
  const span = tracer.startSpan(`build schema`, spanArgs);
  let {
    schemaCustomization: {
      thirdPartySchemas,
      types
    },
    config: {
      mapping: typeMapping
    }
  } = store.getState();
  const typeConflictReporter = new TypeConflictReporter(); // Ensure that user-defined types are processed last

  const sortedTypes = types.sort(type => type.plugin && type.plugin.name === `default-site-plugin`);
  const schemaComposer = createSchemaComposer();
  const schema = await buildSchema({
    schemaComposer,
    nodeStore,
    types: sortedTypes,
    thirdPartySchemas,
    typeMapping,
    typeConflictReporter,
    parentSpan
  });
  typeConflictReporter.printConflicts();
  store.dispatch({
    type: `SET_SCHEMA_COMPOSER`,
    payload: schemaComposer
  });
  store.dispatch({
    type: `SET_SCHEMA`,
    payload: schema
  });
  span.finish();
};

module.exports.rebuildWithSitePage = async ({
  parentSpan
}) => {
  const spanArgs = parentSpan ? {
    childOf: parentSpan
  } : {};
  const span = tracer.startSpan(`rebuild schema with SitePage context`, spanArgs);
  let {
    schemaCustomization: {
      composer: schemaComposer
    },
    config: {
      mapping: typeMapping
    }
  } = store.getState();
  const typeConflictReporter = new TypeConflictReporter();
  const schema = await rebuildSchemaWithSitePage({
    schemaComposer,
    nodeStore,
    typeMapping,
    typeConflictReporter,
    parentSpan
  });
  typeConflictReporter.printConflicts();
  store.dispatch({
    type: `SET_SCHEMA_COMPOSER`,
    payload: schemaComposer
  });
  store.dispatch({
    type: `SET_SCHEMA`,
    payload: schema
  });
  span.finish();
};
//# sourceMappingURL=index.js.map
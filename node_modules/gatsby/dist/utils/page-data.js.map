{"version":3,"sources":["../../src/utils/page-data.js"],"names":["fs","require","path","Promise","chunk","getFilePath","publicDir","pagePath","fixedPagePath","join","read","filePath","rawPageData","readFile","JSON","parse","write","page","result","webpackCompilationHash","body","componentChunkName","outputFile","stringify","updateCompilationHashes","workerPool","pagePaths","segments","map","segment","module","exports"],"mappings":";;AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAE,UAAF,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAE,MAAF,CAApB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAE,UAAF,CAAvB;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAYH,OAAO,CAAE,QAAF,CAAzB;;AAEA,MAAMI,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,EAAgBC,QAAhB,KAA6B;AAC/C,QAAMC,aAAa,GAAGD,QAAQ,KAAM,GAAd,GAAoB,OAApB,GAA6BA,QAAnD;AACA,SAAOL,IAAI,CAACO,IAAL,CAAUH,SAAV,EAAsB,WAAtB,EAAkCE,aAAlC,EAAkD,gBAAlD,CAAP;AACD,CAHD;;AAIA,MAAME,IAAI,GAAG,OAAO;AAAEJ,EAAAA;AAAF,CAAP,EAAsBC,QAAtB,KAAmC;AAC9C,QAAMI,QAAQ,GAAGN,WAAW,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAgBC,QAAhB,CAA5B;AACA,QAAMK,WAAW,GAAG,MAAMZ,EAAE,CAACa,QAAH,CAAYF,QAAZ,EAAuB,OAAvB,CAA1B;AACA,SAAOG,IAAI,CAACC,KAAL,CAAWH,WAAX,CAAP;AACD,CAJD;;AAMA,MAAMI,KAAK,GAAG,OAAO;AAAEV,EAAAA;AAAF,CAAP,EAAsBW,IAAtB,EAA4BC,MAA5B,EAAoCC,sBAApC,KAA+D;AAC3E,QAAMR,QAAQ,GAAGN,WAAW,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAgBW,IAAI,CAACf,IAArB,CAA5B;AACA,QAAMkB,IAAI,GAAG;AACXC,IAAAA,kBAAkB,EAAEJ,IAAI,CAACI,kBADd;AAEXnB,IAAAA,IAAI,EAAEe,IAAI,CAACf,IAFA;AAGXiB,IAAAA,sBAHW;AAIXD,IAAAA;AAJW,GAAb;AAMA,QAAMlB,EAAE,CAACsB,UAAH,CAAcX,QAAd,EAAwBG,IAAI,CAACS,SAAL,CAAeH,IAAf,CAAxB,CAAN;AACD,CATD;;AAWA,MAAMI,uBAAuB,GAAG,CAC9B;AAAElB,EAAAA,SAAF;AAAamB,EAAAA;AAAb,CAD8B,EAE9BC,SAF8B,EAG9BP,sBAH8B,KAI3B;AACH,QAAMQ,QAAQ,GAAGvB,KAAK,CAACsB,SAAD,EAAY,EAAZ,CAAtB;AACA,SAAOvB,OAAO,CAACyB,GAAR,CAAYD,QAAZ,EAAsBE,OAAO,IAClCJ,UAAU,CAACD,uBAAX,CACE;AAAElB,IAAAA;AAAF,GADF,EAEEuB,OAFF,EAGEV,sBAHF,CADK,CAAP;AAOD,CAbD;;AAeAW,MAAM,CAACC,OAAP,GAAiB;AACfrB,EAAAA,IADe;AAEfM,EAAAA,KAFe;AAGfQ,EAAAA;AAHe,CAAjB","sourcesContent":["const fs = require(`fs-extra`)\nconst path = require(`path`)\nconst Promise = require(`bluebird`)\nconst { chunk } = require(`lodash`)\n\nconst getFilePath = ({ publicDir }, pagePath) => {\n  const fixedPagePath = pagePath === `/` ? `index` : pagePath\n  return path.join(publicDir, `page-data`, fixedPagePath, `page-data.json`)\n}\nconst read = async ({ publicDir }, pagePath) => {\n  const filePath = getFilePath({ publicDir }, pagePath)\n  const rawPageData = await fs.readFile(filePath, `utf-8`)\n  return JSON.parse(rawPageData)\n}\n\nconst write = async ({ publicDir }, page, result, webpackCompilationHash) => {\n  const filePath = getFilePath({ publicDir }, page.path)\n  const body = {\n    componentChunkName: page.componentChunkName,\n    path: page.path,\n    webpackCompilationHash,\n    result,\n  }\n  await fs.outputFile(filePath, JSON.stringify(body))\n}\n\nconst updateCompilationHashes = (\n  { publicDir, workerPool },\n  pagePaths,\n  webpackCompilationHash\n) => {\n  const segments = chunk(pagePaths, 50)\n  return Promise.map(segments, segment =>\n    workerPool.updateCompilationHashes(\n      { publicDir },\n      segment,\n      webpackCompilationHash\n    )\n  )\n}\n\nmodule.exports = {\n  read,\n  write,\n  updateCompilationHashes,\n}\n"],"file":"page-data.js"}
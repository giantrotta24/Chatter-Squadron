{"version":3,"sources":["../../src/commands/build.js"],"names":["_","require","path","report","buildHTML","buildProductionBundle","bootstrap","apiRunnerNode","copyStaticDirs","initTracer","stopTracer","db","chalk","tracer","globalTracer","signalExit","telemetry","store","emitter","queryUtil","pageDataUtil","WorkerPool","reportFailure","msg","err","log","panic","waitJobsFinished","Promise","resolve","reject","onEndJob","getState","jobs","active","length","off","on","module","exports","build","program","publicDir","join","directory","openTracingConfigFile","trackCli","buildSpan","startSpan","setTag","graphqlRunner","parentSpan","queryIds","calcInitialDirtyQueryIds","staticQueryIds","pageQueryIds","groupQueryIds","activity","activityTimer","start","processStaticQueries","state","end","graphql","stats","catch","workerPool","create","webpackCompilationHash","hash","dispatch","type","payload","cleanPagePaths","difference","pages","keys","updateCompilationHashes","processPageQueries","boundActionCreators","setProgramStatus","saveState","buildPages","stage","pagePaths","stripIndent","context","bold","info","process","uptime","finish"],"mappings":"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","sourcesContent":["/* @flow */\n\nconst _ = require(`lodash`)\nconst path = require(`path`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst buildHTML = require(`./build-html`)\nconst buildProductionBundle = require(`./build-javascript`)\nconst bootstrap = require(`../bootstrap`)\nconst apiRunnerNode = require(`../utils/api-runner-node`)\nconst { copyStaticDirs } = require(`../utils/get-static-dir`)\nconst { initTracer, stopTracer } = require(`../utils/tracer`)\nconst db = require(`../db`)\nconst chalk = require(`chalk`)\nconst tracer = require(`opentracing`).globalTracer()\nconst signalExit = require(`signal-exit`)\nconst telemetry = require(`gatsby-telemetry`)\nconst { store, emitter } = require(`../redux`)\nconst queryUtil = require(`../query`)\nconst pageDataUtil = require(`../utils/page-data`)\nconst WorkerPool = require(`../utils/worker/pool`)\n\nfunction reportFailure(msg, err: Error) {\n  report.log(``)\n  report.panic(msg, err)\n}\n\ntype BuildArgs = {\n  directory: string,\n  sitePackageJson: object,\n  prefixPaths: boolean,\n  noUglify: boolean,\n  openTracingConfigFile: string,\n}\n\nconst waitJobsFinished = () =>\n  new Promise((resolve, reject) => {\n    const onEndJob = () => {\n      if (store.getState().jobs.active.length === 0) {\n        resolve()\n        emitter.off(`END_JOB`, onEndJob)\n      }\n    }\n    emitter.on(`END_JOB`, onEndJob)\n    onEndJob()\n  })\n\nmodule.exports = async function build(program: BuildArgs) {\n  const publicDir = path.join(program.directory, `public`)\n  initTracer(program.openTracingConfigFile)\n\n  telemetry.trackCli(`BUILD_START`)\n  signalExit(() => {\n    telemetry.trackCli(`BUILD_END`)\n  })\n\n  const buildSpan = tracer.startSpan(`build`)\n  buildSpan.setTag(`directory`, program.directory)\n\n  const { graphqlRunner } = await bootstrap({\n    ...program,\n    parentSpan: buildSpan,\n  })\n\n  const queryIds = queryUtil.calcInitialDirtyQueryIds(store.getState())\n  const { staticQueryIds, pageQueryIds } = queryUtil.groupQueryIds(queryIds)\n\n  let activity = report.activityTimer(`run static queries`, {\n    parentSpan: buildSpan,\n  })\n  activity.start()\n  await queryUtil.processStaticQueries(staticQueryIds, {\n    activity,\n    state: store.getState(),\n  })\n  activity.end()\n\n  await apiRunnerNode(`onPreBuild`, {\n    graphql: graphqlRunner,\n    parentSpan: buildSpan,\n  })\n\n  // Copy files from the static directory to\n  // an equivalent static directory within public.\n  copyStaticDirs()\n\n  activity = report.activityTimer(\n    `Building production JavaScript and CSS bundles`,\n    { parentSpan: buildSpan }\n  )\n  activity.start()\n  const stats = await buildProductionBundle(program).catch(err => {\n    reportFailure(`Generating JavaScript bundles failed`, err)\n  })\n  activity.end()\n\n  const workerPool = WorkerPool.create()\n\n  const webpackCompilationHash = stats.hash\n  if (webpackCompilationHash !== store.getState().webpackCompilationHash) {\n    store.dispatch({\n      type: `SET_WEBPACK_COMPILATION_HASH`,\n      payload: webpackCompilationHash,\n    })\n\n    activity = report.activityTimer(`Rewriting compilation hashes`, {\n      parentSpan: buildSpan,\n    })\n    activity.start()\n\n    // We need to update all page-data.json files with the new\n    // compilation hash. As a performance optimization however, we\n    // don't update the files for `pageQueryIds` (dirty queries),\n    // since they'll be written after query execution.\n    const cleanPagePaths = _.difference(\n      [...store.getState().pages.keys()],\n      pageQueryIds\n    )\n    await pageDataUtil.updateCompilationHashes(\n      { publicDir, workerPool },\n      cleanPagePaths,\n      webpackCompilationHash\n    )\n\n    activity.end()\n  }\n\n  activity = report.activityTimer(`run page queries`)\n  activity.start()\n  await queryUtil.processPageQueries(pageQueryIds, { activity })\n  activity.end()\n\n  require(`../redux/actions`).boundActionCreators.setProgramStatus(\n    `BOOTSTRAP_QUERY_RUNNING_FINISHED`\n  )\n\n  await waitJobsFinished()\n\n  await db.saveState()\n\n  activity = report.activityTimer(`Building static HTML for pages`, {\n    parentSpan: buildSpan,\n  })\n  activity.start()\n  try {\n    await buildHTML.buildPages({\n      program,\n      stage: `build-html`,\n      pagePaths: [...store.getState().pages.keys()],\n      activity,\n      workerPool,\n    })\n  } catch (err) {\n    reportFailure(\n      report.stripIndent`\n        Building static HTML failed${\n          err.context && err.context.path\n            ? ` for path \"${chalk.bold(err.context.path)}\"`\n            : ``\n        }\n\n        See our docs page on debugging HTML builds for help https://gatsby.dev/debug-html\n      `,\n      err\n    )\n  }\n  activity.end()\n\n  await apiRunnerNode(`onPostBuild`, {\n    graphql: graphqlRunner,\n    parentSpan: buildSpan,\n  })\n\n  report.info(`Done building in ${process.uptime()} sec`)\n\n  buildSpan.finish()\n  await stopTracer()\n  workerPool.end()\n}\n"],"file":"build.js"}